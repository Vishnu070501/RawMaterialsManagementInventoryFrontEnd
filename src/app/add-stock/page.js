"use client";
import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { PageHeader } from "@/components/common/PageHeader";
import { LoadingSpinner } from "@/components/common/LoadingSpinner";
import Sidebar from "@/components/Layout/Sidebar";
import { getData, postData } from "@/api/API";
import POForm from "@/components/addStock/POForm";
import PODetails from "@/components/addStock/PODetails";
import POItemsTable from "@/components/addStock/POItemsTable";
import SheetComponent from "@/components/RawMaterials/SheetComponent";
import CoilComponent from "@/components/RawMaterials/CoilComponent";
import { useRouter } from "next/navigation";

const TABLE_HEADERS = [
  "Name",
  "Description",
  "HSN Code",
  "Quantity",
  "Remaining Quantity",
  "Price",
  "Tax %",
  "Delivery Date",
  "Actions",
];

export default function AddStockPage() {
  const [poNumber, setPoNumber] = useState("");
  const [loading, setLoading] = useState(false);
  const [poData, setPoData] = useState(null);
  const [error, setError] = useState(null);
  const [active_tab, setActiveTab] = useState("po");
  const [sheetItems, setSheetItems] = useState([]);
  const [coilItems, setCoilItems] = useState([]);
  const [users, setUsers] = useState([]);
  const [selectedApproverId, setSelectedApproverId] = useState("");
  const [remarks, setRemarks] = useState("");
  const [invoiceNumber, setInvoiceNumber] = useState("");
  const [poSearched, setPoSearched] = useState(false);
  const router = useRouter();

  const fetchUsers = async () => {
    try {
      const response = await getData("/auth/fetch-user/");
      if (response.success && response.data) {
        setUsers(response.data);
      }
    } catch (error) {
      console.error("Error fetching users:", error);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const handleApproveAll = async () => {
    if (!selectedApproverId) {
      alert("Please select an approver first");
      return;
    }
    if (sheetItems.length > 0) {
      const missingBlankSize = sheetItems.find((item) => !item.blank_size);
      if (missingBlankSize) {
        alert(`Please enter blank size for ${missingBlankSize.name}`);
        return;
      }
    }
    if (coilItems.length > 0) {
      const missingSlitSize = coilItems.find((item) => !item.slit_size);
      if (missingSlitSize) {
        alert(`Please enter slit size for ${missingSlitSize.name}`);
        return;
      }
    }

    try {
      const raw_materials = sheetItems.map((item) => ({
        po_item_list_id: item.isAutoGeneratedId ? null : item.po_item_list_id || null,
        item_name: item.item_name || item.name,
        description: item.description,
        id: null,
        price: parseFloat(item.price || item.unit_price),
        quantity_requested: parseFloat(item.quantity_requested || 0),
        quantity_requested_unit_id: parseInt(item.quantity_requested_unit_id),
        weight_requested: parseFloat(item.weight || item.weight_requested),
        weight_requested_unit_id: parseInt(item.weight_requested_unit_id),
        blank_size: parseFloat(item.blank_size),
        thickness: parseFloat(item.thickness),
        slit_size: parseFloat(item.slit_size),
        thickness_unit_id: parseInt(item.thickness_unit_id),
        blank_size_unit_id: parseInt(item.blank_size_unit_id),
        slit_size_unit_id: parseInt(item.slit_size_unit_id),
        history_date: item.history_date,
        coil_id: item.coil_id ? parseInt(item.coil_id) : null
      }));
      
      const coils = coilItems.map((item) => ({
        po_item_list_id: item.isAutoGeneratedId ? null : item.po_item_list_id || null,
        item_name: item.item_name || item.name,
        description: item.description,
        id: null,
        price: parseFloat(item.price || item.unit_price),
        quantity_requested: parseFloat(item.quantity_requested || 0),
        quantity_unit_id: parseInt(item.quantity_requested_unit_id),
        weight_requested: parseFloat(item.weight || item.weight_requested),
        weight_unit_id: parseInt(item.weight_requested_unit_id),
        thickness: parseFloat(item.thickness),
        slit_size: parseFloat(item.slit_size),
        thickness_unit_id: parseInt(item.thickness_unit_id),
        history_date: item.history_date,
        slit_size_unit_id: parseInt(item.slit_size_unit_id)
      }));

      const payload = {
        raw_materials,
        coils,
        approval_type: "check_in",
        requested_to: Number(selectedApproverId),
        invoice_number: invoiceNumber,
        remarks: remarks,
        invoice_number: invoiceNumber,
        po_number: poNumber,
      };

      console.log("Sending payload:", payload);

      const response = await postData(
        "/inventory/bulk-raw-material-coil-approval/",
        payload
      );
      console.log("Response:", response);
      if (response.success) {
        alert("Items for Approval Requested successfully");
        router.push("/inventories");
      }
    } catch (error) {
      console.log("Error details:", error);
      alert("Failed to approve items. Please check the console for details.");
    }
  };

  const handleBackClick = () => {
    router.back();
  };

  const handleAction = async (path, item) => {
    if (path === "sheet") {
      const sheetData = {
        ...item,
        type: "sheet",
        addedAt: new Date().toISOString(),
        poNumber: poNumber,
      };
      console.log("Sheet Data:", sheetData);
      setSheetItems((prevItems) => [...prevItems, sheetData]);

      const updatedPoItems = [...(poData?.items || [])];
      const itemIndex = updatedPoItems.findIndex(
        (poItem) => poItem.id === item.id
      );
      if (itemIndex !== -1) {
        updatedPoItems.splice(itemIndex, 1);
      }
      setPoData({
        ...poData,
        items: updatedPoItems,
      });
    } else if (path === "coil") {
      const coilData = {
        ...item,
        type: "coil",
        addedAt: new Date().toISOString(),
        poNumber: poNumber,
      };
      setCoilItems((prevItems) => [...prevItems, coilData]);

      const updatedPoItems = [...(poData?.items || [])];
      const itemIndex = updatedPoItems.findIndex(
        (poItem) => poItem.id === item.id
      );
      if (itemIndex !== -1) {
        updatedPoItems.splice(itemIndex, 1);
      }
      setPoData({
        ...poData,
        items: updatedPoItems,
      });
    }
  };

  const fetchPoData = async (poNumber) => {
    setLoading(true);
    setError(null);
    setPoSearched(true);
    setSheetItems([]);
    setCoilItems([]);

    try {
      const response = await getData(
        `/inventory/fetch-po-raw-materials/?po_number=${poNumber}&is_dropdown=true`
      );
      if (response && (response.items || response.data)) {
        const data = response.data || response;

        const processedItemIds = [...sheetItems, ...coilItems].map(
          (item) => item.id
        );

        const filteredItems = data.items.filter(
          (item) => !processedItemIds.includes(item.id)
        );

        if (filteredItems.length === 0) {
          setPoData({ ...data, items: [] });
          setError("All items from this PO have already been processed.");
        } else {
          setPoData({
            ...data,
            items: filteredItems.map((item) => ({
              ...item,
            })),
            processedItems: processedItemIds,
          });
        }

      } else {
        setError("No data found for this PO number");
      }
    } catch (error) {
      setError(error.message || "Failed to fetch PO data");
    } finally {
      setLoading(false);
      setPoNumber(poNumber);

    }
  };

  const handleDelete = (type, item) => {
    const isFromPO = item.hasOwnProperty('po_quantity') && !item.hasOwnProperty('addedAt');

    if (!isFromPO) {
      setPoData((prevData) => {
        const currentItems = prevData?.items ? [...prevData.items] : [];
        if (!currentItems.find((poItem) => poItem.po_item_list_id === item.po_item_list_id)) {
          currentItems.push(item);
        }
        return {
          ...prevData,
          items: currentItems
        };
      });
    }

    if (type === "sheet") {
      setSheetItems(prevItems =>
        prevItems.filter(sheet => sheet.po_item_list_id !== item.po_item_list_id)
      );
    } else if (type === "coil") {
      setCoilItems(prevItems =>
        prevItems.filter(coil => coil.po_item_list_id !== item.po_item_list_id)
      );
    }
  };

  const renderContent = () => {console.log("poData:", poNumber);
    switch (active_tab) {
      case "po":
        return (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white rounded-xl shadow-lg p-3 md:p-6"
          >
            <POForm onSubmit={fetchPoData} loading={loading} />
            {loading && <LoadingSpinner />}
            {error && (
              <div className="mt-3 p-3 bg-red-50 text-red-600 rounded-lg text-xs">
                {error}
              </div>
            )}
            {poData && !error && (
              <div className="mt-4 bg-gray-50 p-3 rounded-lg">
                <PODetails
                  poNumber={poData?.po_number || poNumber}
                  status={poData?.status || "Pending"}
                />
                <POItemsTable
                  items={poData?.items}
                  headers={TABLE_HEADERS}
                  handleAction={handleAction}
                />
              </div>
            )}
          </motion.div>
        );
      case "sheet":
        return (
          <SheetComponent
            items={sheetItems}
            setterFunction={setSheetItems}
            onDelete={(item) => handleDelete("sheet", item)}
            poSearched={poSearched}
            poNumber={poNumber}
          />
        );
      case "coil":
        return (
          <CoilComponent
            items={coilItems}
            setterFunction={setCoilItems}
            onDelete={(item) => handleDelete("coil", item)}
            poSearched={poSearched}
            poNumber={poNumber}

          />
        );
      default:
        return null;
    }
  };

  return (
    <div className="flex flex-col lg:flex-row min-h-screen text-sm">
      <Sidebar />
      <div className="flex-1 bg-gradient-to-br from-amber-50 to-orange-100">
        <PageHeader
          title="Add Stock"
          description="Manage Stock and PO Details"
        />
        <main className="max-w-7xl mx-auto px-3 sm:px-4 lg:px-6 py-6">
          <div className="flex items-center space-x-2 mb-4 overflow-x-auto whitespace-nowrap">
            <button
              onClick={() => setActiveTab("po")}
              className={`px-3 py-1.5 rounded-t-lg transition-colors text-xs ${
                active_tab === "po"
                  ? "bg-white text-orange-600 border-b-2 border-orange-600"
                  : "bg-gray-100 text-gray-600"
              }`}
            >
              PO Details
            </button>
            <button
              onClick={() => setActiveTab("sheet")}
              className={`px-3 py-1.5 rounded-t-lg transition-colors text-xs ${
                active_tab === "sheet"
                  ? "bg-white text-orange-600 border-b-2 border-orange-600"
                  : "bg-gray-100 text-gray-600"
              }`}
            >
              Raw Materials
            </button>
            <button
              onClick={() => setActiveTab("coil")}
              className={`px-3 py-1.5 rounded-t-lg transition-colors text-xs ${
                active_tab === "coil"
                  ? "bg-white text-orange-600 border-b-2 border-orange-600"
                  : "bg-gray-100 text-gray-600"
              }`}
            >
              Coil
            </button>
            <div className="flex-grow"></div>
            <button
              onClick={handleBackClick}
              className="px-2 py-1 bg-amber-100 hover:bg-amber-200 text-amber-800 rounded-lg flex items-center transition-colors text-xs"
            >
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className="h-3 w-3 mr-1" 
                viewBox="0 0 20 20" 
                fill="currentColor"
              >
                <path 
                  fillRule="evenodd" 
                  d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" 
                  clipRule="evenodd" 
                />
              </svg>
              Back to inventory
            </button>
          </div>

          {renderContent()}
          {active_tab !== "po" && (
  <div className="mt-10 flex justify-end space-x-2">
    <select
      value={selectedApproverId}
      onChange={(e) => setSelectedApproverId(e.target.value)}
      onClick={fetchUsers}
      className="px-3 py-2 border border-amber-200 rounded-lg focus:ring-1 focus:ring-amber-500 focus:border-amber-500 bg-white shadow-sm text-gray-700 w-full md:w-auto text-xs"
    >
      <option value="">Select Approver</option>
      {users.map((user) => (
        <option key={user.id} value={user.id}>
          {user.name} - {user.department}
        </option>
      ))}
    </select>
    <input
      type="text"
      value={invoiceNumber}
      onChange={(e) => setInvoiceNumber(e.target.value)}
      placeholder="Enter invoice number..."
      className="px-3 py-2 border border-amber-200 rounded-lg focus:ring-1 focus:ring-amber-500 focus:border-amber-500 bg-white shadow-sm text-gray-700 w-full md:w-auto placeholder-gray-400 text-xs"
    />

    <input
      type="text"
      value={remarks}
      onChange={(e) => setRemarks(e.target.value)}
      placeholder="Enter remarks..."
      className="px-3 py-2 border border-amber-200 rounded-lg focus:ring-1 focus:ring-amber-500 focus:border-amber-500 bg-white shadow-sm text-gray-700 w-full md:w-auto placeholder-gray-400 text-xs"
    />

    <button
      onClick={handleApproveAll}
      disabled={!selectedApproverId}
      className="px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg hover:from-green-600 hover:to-green-700 transition-all duration-200 shadow-sm disabled:from-gray-300 disabled:to-gray-400 disabled:cursor-not-allowed font-medium w-full md:w-auto text-xs"
    >
      Request for Approve
    </button>
  </div>
)}
        </main>
   
 
</div>
</div>
);
}
