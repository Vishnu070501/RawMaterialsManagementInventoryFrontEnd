"use client";
import { motion } from "framer-motion";
import { useState, useEffect } from "react";
import SearchDropdown from "../Input/SearchDropdown";
import ManualEntryComponent from "./ManualEntryComponent";
import TableActionDropdown from "../common/TableActionDropdown";
import { getData } from "@/api/API";
// import { useQuery } from "@tanstack/react-query";
export default function CoilComponent({
  items = [],
  onDelete,
  setterFunction,
  poSearched,
  poNumber,
}) {
  const [showManualEntry, setShowManualEntry] = useState(false);
  const [quantities, setQuantities] = useState({});
  const [units, setUnits] = useState([]);
  const [defaultUnits, setDefaultUnits] = useState({
    number: "",
    weight: "",
    distance: ""
  });

  const handleManualEntry = (formData) => {
    // Generate a unique ID for manual entries, or use the existing material's ID if available
    const isAutoGenerated = !formData.existingRawMaterialId;
    const itemId = formData.existingRawMaterialId 
      ? formData.existingRawMaterialId  // Use the existing material's ID
      : `m_${Date.now() % 10000}${Math.floor(Math.random() * 1000)}`; // Generate a simple numeric ID for new materials
    
    const newItem = {
      ...formData,
      po_item_list_id: itemId,
      isAutoGeneratedId: isAutoGenerated, // Add this flag
      remaining_quantity: formData.quantity_requested,
      po_quantity: formData.quantity_requested,
      po_number: poNumber,
      history_date: formData.history_date,
    };
  
    setterFunction((prev) => [...prev, newItem]);
    setShowManualEntry(false);
  };
  

  const handleWeightChange = (POItemId, newValue) => {
    if (newValue < 0) return;
    const updatedItems = items.map((item) => {
      if (item.po_item_list_id === POItemId) {
        return {
          ...item,
          weight: Math.max(0, newValue),
        };
      }
      return item;
    });
    setterFunction(updatedItems);
  };

  // Add this useEffect to fetch units when component mounts
  useEffect(() => {
    const fetchUnits = async () => {
      const response = await getData("/master/units/");
      setUnits(response.data);
      
      // Find default units
      if (response.data && response.data.length > 0) {
        const distanceUnit = response.data.find(unit => unit.type === "DISTANCE" && unit.symbol === "mm");
        const weightUnit = response.data.find(unit => unit.type === "WEIGHT" && unit.symbol === "Kg");
        const numberUnit = response.data.find(unit => unit.type === "NUMBER" && unit.symbol === "nos");
        

        
        setDefaultUnits({
          number: numberUnit ? numberUnit.id : "",
          weight: weightUnit ? weightUnit.id : "",
          distance: distanceUnit ? distanceUnit.id : ""
        });
        
        // Apply default units to existing items that don't have units set
        if (items.length > 0) {
          const updatedItems = items.map(item => {
            const updates = {};
            
            if (!item.quantity_requested_unit_id && numberUnit) {
              updates.quantity_requested_unit_id = numberUnit.id;
            }
            
            if (!item.weight_requested_unit_id && weightUnit) {
              updates.weight_requested_unit_id = weightUnit.id;
            }
            
            if (!item.thickness_unit_id && distanceUnit) {
              updates.thickness_unit_id = distanceUnit.id;
            }
            
            if (!item.slit_size_unit_id && distanceUnit) {
              updates.slit_size_unit_id = distanceUnit.id;
            }
            
            return { ...item, ...updates };
          });
          
          setterFunction(updatedItems);
        }
      }
    };
    fetchUnits();
  }, []);

  const getUnitsByType = (type) => {
    return units.filter((unit) => unit.type === type);
  };


  const handleThicknessChange = (POItemId, newValue) => {
    if (newValue < 0) return;
    const updatedItems = items.map((item) => {
      if (item.po_item_list_id === POItemId) {
        return {
          ...item,
          thickness: Math.max(0, newValue),
        };
      }
      return item;
    });
    setterFunction(updatedItems);
  };

  const handleSlitSizeChange = (POItemId, newValue) => {
    if (newValue < 0) return;
    const updatedItems = items.map((item) => {
      if (item.po_item_list_id === POItemId) {
        return {
          ...item,
          slit_size: Math.max(0, newValue),
        };
      }
      return item;
    });
    setterFunction(updatedItems);
  };

  const handleMaterialSelect = (selected, index, setProperty) => {
    setterFunction((prev) =>
      prev.map((item, i) => {
        if (i === index) {
          return {
            ...item,
            [setProperty]: selected.value,
          };
        }
        return item;
      })
    );
  };
  const handleQuantityChange = (POItemId, newValue) => {
    const updatedItems = items.map((item) => {
      if (item.po_item_list_id === POItemId) {
        return {
          ...item,
          quantity_requested: Math.min(newValue, item.remaining_quantity),
        };
      }
      return item;
    });
    setterFunction(updatedItems);
  };

  const headers = [
    "Existing Raw Material",
    "Name",
    "Description",
    "Quantity",
    "Remaining Quantity",
    "Set Quantity",
    "Weight",
    "Thickness",
    "Slit Size",
    "Unit Price",
    "Tax %",
    "Delivery Date",
    "History Date",
    "Actions",
  ];
  const handleDelete = (item) => {
    // Make sure we're identifying items uniquely
    if (!item.po_item_list_id) {
      // If the item doesn't have a po_item_list_id, generate a temporary one
      item = { ...item, po_item_list_id: `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}` };
    }
    
    // Call the parent component's onDelete function with the item
    onDelete(item);
  };


return (

  <> {showManualEntry && (
     <div className="mb-6">
        <ManualEntryComponent 
      onSubmit={handleManualEntry} 
      type="coil" 
      poNumber={poNumber} // Add this line
    />
     </div>
   )}
   <motion.div
     initial={{ opacity: 0, y: 20 }}
     animate={{ opacity: 1, y: 0 }}
     className="bg-white rounded-xl shadow-xl p-6"
   >  {poSearched && (
  <div className="mb-4">
   <button
     onClick={() => setShowManualEntry((prev) => !prev)}
     className="px-4 py-2 bg-gradient-to-r from-amber-500 to-amber-600 text-white rounded-lg hover:from-amber-600 hover:to-amber-700 flex items-center gap-2"
   >
     <svg
       className="w-5 h-5"
       fill="none"
       viewBox="0 0 24 24"
       stroke="currentColor"
     >
       <path
         strokeLinecap="round"
         strokeLinejoin="round"
         strokeWidth={2}
         d="M12 4v16m8-8H4"
       />
     </svg>
     Add coil Manually
   </button>
 </div>)}
     <div className="overflow-x-auto rounded-lg border border-gray-200">
       <table className="min-w-full divide-y divide-gray-200">
         <thead className="bg-gradient-to-r from-amber-50 to-amber-100">
           <tr>
             {headers.map((header, index) => (
               <th
                 key={index}
                 className="px-3 py-2 text-left text-xs font-semibold text-gray-700 tracking-wider whitespace-nowrap"
               >
                 {header}
               </th>
             ))}
           </tr>
         </thead>
         <tbody className="bg-white divide-y divide-gray-100">
           {Array.isArray(items) && items.length > 0 ? (
             items.map((item, index) => {
               const currentQuantity = quantities[item.name] || 0;
               const remainingQuantity = item.remaining_quantity;
               const rowData = [
                 item.name,
                 item.description,
                 item.po_quantity,
                 remainingQuantity,
                 item.quantity_requested || 0,
                 
                 item.weight || "",
                 item.thickness || "",
                 item.slit_size || "",
                 item.unit_price,
                 `${item.tax_percent}%`,
                 item.expected_delivery_date,
                 item.history_date
               ];

                  return (
                    <tr
                      key={index}
                      className="hover:bg-amber-50 transition-all duration-200"
                    >
                      <td className="px-4 py-4">
                        <SearchDropdown
                          searchEndpoint="/inventory/search/coils/?q=&is_dropdown=true"
                          onSelect={(selected) =>
                            handleMaterialSelect(
                              selected,
                              index,
                              "existingRawMaterialId"
                            )
                          }
                          placeholder="Search materials..."
                          displayField="item_name"
                          valueField="id"
                          className="min-w-[200px]"
                          resultsPath="data.results" // Add this to specify the path to the results array
                        />
                      </td>
                      {rowData.map((data, idx) => (
                        <td
                          key={idx}
                          className="px-6 py-4 text-sm text-gray-700 whitespace-nowrap"
                        >
                          {idx === 4 ? (
                            <div className="flex items-center gap-2">
                              <input
                                type="number"
                                min="0"
                                value={item.quantity_requested}
                                onChange={(e) =>
                                  handleQuantityChange(
                                    item.po_item_list_id,
                                    e.target.value
                                  )
                                }
                                max={item.po_quantity}
                                className="w-24 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-sm"
                              />
                              <select
                                value={item.quantity_requested_unit_id || ""}
                                onChange={(e) =>
                                  handleMaterialSelect(
                                    { value: e.target.value },
                                    index,
                                    "quantity_requested_unit_id"
                                  )
                                }
                                className="w-20 px-2 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-sm"
                              >
                                <option value="">Unit</option>
                                {getUnitsByType("NUMBER").map((unit) => (
                                  <option key={unit.id} value={unit.id}>
                                    {unit.name}
                                  </option>
                                ))}
                              </select>
                            </div>
                          ) : idx === 5 ? (
                            <div className="flex items-center gap-2">
                              <input
                                type="number"
                                min="0"
                                value={item.weight || ""}
                                onChange={(e) =>
                                  handleWeightChange(
                                    item.po_item_list_id,
                                    e.target.value
                                  )
                                }
                                className="w-24 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-sm"
                              />
                              <select
                                value={item.weight_requested_unit_id || ""}
                                onChange={(e) =>
                                  handleMaterialSelect(
                                    { value: e.target.value },
                                    index,
                                    "weight_requested_unit_id"
                                  )
                                }
                                className="w-20 px-2 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-sm"
                              >
                                <option value="">Unit</option>
                                {getUnitsByType("WEIGHT").map((unit) => (
                                  <option key={unit.id} value={unit.id}>
                                    {unit.name}
                                  </option>
                                ))}
                              </select>
                            </div>
                          ) : idx === 6 ? (
                            <div className="flex items-center gap-2">
                              <input
                                type="number"
                                min="0"
                                value={item.thickness || ""}
                                onChange={(e) =>
                                  handleThicknessChange(
                                    item.po_item_list_id,
                                    e.target.value
                                  )
                                }
                                className="w-24 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-sm"
                              />
                              <select
                                value={item.thickness_unit_id || ""}
                                onChange={(e) =>
                                  handleMaterialSelect(
                                    { value: e.target.value },
                                    index,
                                    "thickness_unit_id"
                                  )
                                }
                                className="w-20 px-2 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-sm"
                              >
                                <option value="">Unit</option>
                                {getUnitsByType("DISTANCE").map((unit) => (
                                  <option key={unit.id} value={unit.id}>
                                    {unit.name}
                                  </option>
                                ))}
                              </select>
                            </div>
                          ) : idx === 7 ? (
                            <div className="flex items-center gap-2">
                              <input
                                type="number"
                                min="0"
                                value={item.slit_size || ""}
                                onChange={(e) =>
                                  handleSlitSizeChange(
                                    item.po_item_list_id,
                                    e.target.value
                                  )
                                }
                                className="w-24 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-sm"
                              />
                              <select
                                value={item.slit_size_unit_id || ""}
                                onChange={(e) =>
                                  handleMaterialSelect(
                                    { value: e.target.value },
                                    index,
                                    "slit_size_unit_id"
                                  )
                                }
                                className="w-20 px-2 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-amber-500 text-sm"
                              >
                                <option value="">Unit</option>
                                {getUnitsByType("DISTANCE").map((unit) => (
                                  <option key={unit.id} value={unit.id}>
                                    {unit.name}
                                  </option>
                                ))}
                              </select>
                            </div>
                          ) : (
                            data
                          )}
                        </td>
                      ))}

                      <td className="px-4 py-4">
                        <div className="flex items-center gap-2">
                          <button
                            onClick={() => handleDelete(item)}
                            className="p-2 bg-gradient-to-r from-red-500 to-red-600 rounded-lg hover:from-red-600 hover:to-red-700 transition-all duration-200"
                            title="Delete"
                          >
                            <svg
                              className="w-4 h-4 text-white"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                              />
                            </svg>
                          </button>
                        </div>
                      </td>
                    </tr>
                  );
                })
              ) : (
                <tr>
                  <td
                    colSpan={headers.length}
                    className="px-6 py-8 text-center text-gray-500 bg-gray-50"
                  >
                    No items found
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </motion.div>
    </>
  );
}
